#!/usr/bin/env python3
"""
This script is used to quickly make updates to the course webpage, such as
adding a link to lecture slides / video.

Usage:
  ./update_website [-d | --dry] <command> <lec_num> <url>

  Where <command> is one of:
    video
    slides

Options:
  -h --help     Show this screen.
  -d --dry      Prints resulting HTML instead of modifying file
"""

from docopt import docopt
from bs4 import BeautifulSoup

# Name of HTML file
INDEX = 'index.html'

# HTML class of the calendar div
CALENDAR_CLASS = 'calendar'

# Column that contains the lecture information
LECTURE_COL = 2

# Text of the links to add
DEMO_TEXT = '(demo)'
VIDEO_TEXT = '(video)'
SLIDES_TEXT = '(slides)'


def parse_index() -> BeautifulSoup:
    with open(INDEX, 'r') as fp:
        return BeautifulSoup(fp, 'html5lib')


def write_index(soup: BeautifulSoup):
    with open(INDEX, 'w') as fp:
        fp.write(soup.prettify())


def get_calendar(soup: BeautifulSoup) -> [BeautifulSoup]:
    return soup.find('div', 'calendar').table.find_all('tr')


def make_link(soup: BeautifulSoup, text: str, url: str) -> BeautifulSoup:
    link = soup.new_tag('a', href=url)
    link.string = text
    return link


def add_video_link(soup: BeautifulSoup,
                   lec_num: int,
                   url: str) -> BeautifulSoup:
    calendar = get_calendar(soup)
    cell = calendar[lec_num].select('td')[LECTURE_COL]
    link = make_link(soup, VIDEO_TEXT, url)

    cell.append('\n')
    cell.append(link)
    return soup


def add_slides_link(soup: BeautifulSoup,
                    lec_num: int,
                    url: str) -> BeautifulSoup:
    calendar = get_calendar(soup)
    cell = calendar[lec_num].select('td')[LECTURE_COL]
    link = make_link(soup, SLIDES_TEXT, url)

    cell.append('\n')
    cell.append(link)
    return cell


ARG_TO_COMMAND = {
    'video': add_video_link,
    'slides': add_slides_link,
}

if __name__ == '__main__':
    arguments = docopt(__doc__)

    soup = parse_index()

    command = ARG_TO_COMMAND[arguments['<command>']]
    lec_num = int(arguments['<lec_num>'])
    url = arguments['<url>']

    result = command(soup, lec_num, url)

    if arguments['--dry']:
        print(soup.prettify())
    else:
        write_index(soup)
